plot(x,y)
par(mfrow=c(1,2))
plot(airquality$Ozone, imputed)
imputed1
imputed2
help("par")
imp_ozone3=imputed3$data[,1]
imp_ozone = imputed$data[,1]
imp_ozone2=imputed2$data[,1]
library(mlr)
data(iris)
force(iris)
irisTask = makeClassifTask(data = iris, target = "Species")
View(irisTask)
View(irisTask)
View(irisTask)
mytree = makeLearner("classif.rpart")
mytree
help("makeClassifTask")
set.seed(42)
iris_nobs = nrow(iris)
iris_train_no = sample(iris_nobs, 0.7*iris_nobs)
iris_train_no
length(iris_train_no)
iris_train_no = sample(iris_nobs, 2/3*iris_nobs)
length(iris_train_no)
typeof(clothing_train_no)
typeof(iris_train_no)
seq_len(nrow(iris))
clothing_validate_no = sample(setdiff(seq_len(iris_nobs), clothing_train_no), 0.30*clothing_nobs)
iris_validate_no = sample(setdiff(seq_len(iris_nobs), iris_train_no), 1/3*iris_nobs)
length(iris_validate_no)
validation_data = clothing[iris_validate_no,]
training_data = iris[iris_train_no,]
validation_data = iris[iris_validate_no,]
training_data
dim(training_data)
table
table(training_data)
n = nrow(iris)
set.seed(42)
train.id = sample(n, size = 2/3*n)
test.id = setdiff(1:n, train.id)
train(mytree, )
train.id
test.id
mymodel = train(mytree, irisTask, subset = train.id)
mymodel
pred = predict(mymodel, irisTask, subset = test.id)
pred
typeof(pred)
pred[1:51]
dim(pred)
table(pred)
pred
pred[1:3]
pred[1:50]
pred[1:30]
pred[1:3]
names(pred)
pred[1:7]
pred[1:6]
pred[1:4]
pred[1:3]
cm()
cm(pred)
pred$data
table(pred$data[,2:3])
48/50
library(MASS)
dim(Cars93)
attach(Cars93)
names(Cars93)
attach(Cars93)
cars_model = lm(Price ~ RPM + Horsepower + Cylinders + Fuel.tank.capacity + Passengers)
extractAIC(cars_model)
cars_model = lm(Price ~ RPM + Horsepower + Fuel.tank.capacity + Passengers)
extractAIC(cars_model)
cars_model = lm(Price ~ RPM + Horsepower + Fuel.tank.capacity + Passengers + Model + Manufacturer)
extractAIC(cars_model)
Cars93
Cars93
cars_model = lm(Price ~ RPM + Horsepower + Fuel.tank.capacity + Passengers + Weight)
extractAIC(cars_model)
extractAIC(cars_model, k = length(Cars93))
Cars93
extractAIC(cars_model, k = length(Cars93))
extractAIC(cars_model)
names(Cars93)
cars_model2 = lm(Price ~ Weight + EngineSize + Luggage.room + Wheelbase)
extractAIC(cars_model)
extractAIC(cars_model2)
extractAIC(cars_model, k = length(Cars93))
extractAIC(cars_model2, k = length(Cars93))
extractAIC(cars_model, k = log(length(Cars93)))
extractAIC(cars_model2, k = log(length(Cars93)))
extractAIC(cars_model, k = log(length(Cars93)))
extractAIC(cars_model, scale = sig2)
summ = summary(cars_model)
summ
sig = summ$sigma
sig
extractAIC(cars_model, scale = sig * sig)
summ2 = summary(cars_model2)
sig2 = summ2$sigma
extractAIC(cars_model2, scale = sig2 * sig2)
summa3=summary(lm(Price ~ RPM ))
sig3=summa3$sigma
extractAIC(lm(Price ~ RPM),scale=sig3*sig3)
source('D:/MS/SEM 2/DM/Exercises/Logistic Regression.R')
setwd("D:/MS/SEM 2/Data Mining/Exercises")
setwd("D:/MS/SEM 2/Data Mining/Exercises")
ozone_mean = mean(airquality$Ozone)
is.na(airquality$Ozone)
sum(is.na(airquality))
table(is.na(airquality))
table(is.na(airquality$Ozone))
sum(c(TRUE,TRUE,FALSE))
mean(airquality$Ozone, na.rm = TRUE)
dim(na.omit(airquality))
complete.cases(airquality$Ozone)
which(is.na(airquality$Ozone), arr.ind = TRUE)
?write.table
time1 = c(2,2,3,4,4,5,6,7,8,9,16)
time = c(2,2,3,4,4,5,6,7,8,9)
distance = c(10,11,12,13,14,15,20,18,22,25)
plot(time,distance)
model = lm(distance ~ time)
model
summary(model)
plot(time,distance)
abline(model)
res = residuals(model)
fit = fitted(model)
plot(residuals())
plot(res)
abline
abline(model)
abline(model)
abline(model$residuals
)
abline(model$residuals)
line(x,0)
line(0)
var(res)
mean(res)
sum(res)
res
plot(time,res)
qqnorm(res)
qqline(res)
y = 1 + 2 * x
y
y
y
x = 2
y
x = c(1,2,4,56,7,5)
y = 2 + 4 * x
y
a = c (1,2,4)
b = c (2,3,4)
a + b
a * b
iris
d = dist(iris, method = "euclidean")
d <- dist(iris, method = "euclidean")
d
d = dist(iris, method = "euclidean")
d
d
save.image("~/tmp.RData")
fit = hclust(d, method = "ward")
View(fit)
plot(fit)
groups = cutree(fit, k = 5)
rect.hclust(fit, k = 5, border = "red")
d2 = dist(iris, method = "euclidean")
fit2 = hclust(d2, method = "average")
plot(fit2)
groups2 = cutree(fit2, k = 5)
rect.hclust(fit2, k = 5, border = "red")
d4 = dist(iris, method = "euclidean")
fit4 = hclust(d4, method = "single")
plot(fit4)
groups4 = cutree(fit4, k = 5)
rect.hclust(fit4, k = 5, border = "red")
d3 = dist(iris, method = "euclidean")
fit3 = hclust(d3, method = "complete")
plot(fit3)
groups3 = cutree(fit3, k = 5)
rect.hclust(fit3, k = 5, border = "red")
# K-means clustering with 3 clusters
iris_data = iris[,1:4]
head(iris_data)
iris
fit5 = kmeans(iris_data, 3)
fit5
fit6 = kmeans(iris_data, 3)
fit6
fit6 = kmeans(iris_data, 2)
fit6
library(cluster)
clusplot(iris_data, fit5$cluster, color = TRUE, shade = TRUE, labels = 2, lines = 0)
clusplot(iris_data, fit6$cluster, color = TRUE, shade = TRUE, labels = 2, lines = 0)
setwd("D:/MS/SEM 3/MVDA/Exercises")
diet = read.csv("Data/pentaTrain.csv", header = TRUE, sep = ";")
View(diet)
diet = read.csv("Cluster_Analysis_Survey.csv", header = TRUE, sep = ";")
View(diet)
diet = read.csv("Cluster_Analysis_Survey.csv", header = TRUE, sep = ",")
View(diet)
names(diet)
diet = diet[,2:]
diet = diet[:,2:]
View(diet)
diet = diet(:,2:)
diet = diet(,2)
diet = diet[,2]
diet = read.csv("Cluster_Analysis_Survey.csv", header = TRUE, sep = ",")
diet[,2]
diet[,2:4]
diet[,2:3]
length(diet)
diet[,2:3] + diet[,5:length(diet)]
cbind(diet[,2:3], diet[,5:length(diet)])
diet = cbind(diet[,2:3], diet[,5:length(diet)])
View(diet)
diet = read.csv("Cluster_Analysis_Survey.csv", header = TRUE, sep = ",")
diet = cbind(diet[,2:3], diet[,5:length(diet)])
View(diet)
diet = cbind(diet[,2:3], diet[,5:length(diet)])
View(diet)
diet = read.csv("Cluster_Analysis_Survey.csv", header = TRUE, sep = ",")
names(diet)
diet = cbind(diet[,2:3], diet[,5:length(diet)])
View(diet)
diet = read.csv("Cluster_Analysis_Survey.csv", header = TRUE, sep = ",")
View(diet)
diet = read.csv("Cluster_Analysis_Survey.csv", header = TRUE, sep = ",")
View(diet)
diet = read.csv("Cluster_Analysis_Survey.csv", header = TRUE, sep = ",")
View(diet)
diet = cbind(diet[,2:3], diet[,5:length(diet)])
View(diet)
diet = read.csv("Cluster_Analysis_Survey.csv", header = TRUE, sep = ",")
diet = diet[, -1]
View(diet)
diet = diet[, -3]
View(diet)
View(diet)
View(diet)
diet[9,length(diet)]
diet[9,length(diet)] = 'Female'
View(diet)
View(diet)
.Primitive("names")
names(diet)
# impute 'most frequent meal' eggs => home cooked, canteen => restaurant
diet[, Most.frequent.source.of.your.main.meal..== 'Canteen']
# impute 'most frequent meal' eggs => home cooked, canteen => restaurant
diet[, 'Most.frequent.source.of.your.main.meal..' == 'Canteen']
# impute 'most frequent meal' eggs => home cooked, canteen => restaurant
diet[, "Most.frequent.source.of.your.main.meal.." == 'Canteen']
View(diet)
library(plyr)
diet$Which.Region.do.you.belong.to.
library(gdata)
diet$region = diet$Which.Region.do.you.belong.to.
View(diet)
diet$age = diet$How.old.are.you...years.completed.
diet$height = diet$What.is.your.height...in.cm.
diet$weight = diet$What.is.your.weight...in.Kg.
diet$meals_per_day = diet$How.many.times.do.you.eat.in.a.day..
diet$fruits = diet$How.many.days.in.a.week.do.you.eat.fruits.
diet$meat = diet$How.many.days.in.a.week.do.you.eat.meat.
diet$dairy = diet$How.many.days.in.a.week.do.you.eat.dairy.products.
diet$sweets = diet$How.many.days.in.a.week.do.you.eat.sweets.
diet$fast_food = diet$How.many.days.in.a.week.do.you.eat.fast.food.
diet$skip_breakfast = diet$How.many.days.in.a.week.do.you.skip.breakfast.
diet$alcohol = diet$How.many.days.in.a.week.do.you.consume.alcoholic.beverages.
diet$main_meal = diet$Most.frequent.source.of.your.main.meal..
diet$geneder = diet$What.is.your.gender..1
# delete old columns
diet = diet[, -c(1:14)]
View(diet)
diet[, diet$main_meal == 'Canteen']
# impute 'most frequent meal' eggs => home cooked, canteen => restaurant
diet[diet$main_meal == 'Canteen']
diet[diet$main_meal == 'Canteen']
diet
nrow(diet)
region1 = seq(0, 0, length.out = nrow())
region1 = seq(0, 0, length.out = nrow(diet))
region2 = seq(0, 0, length.out = nrow(diet))
region1[diet$region=='Asia'] = 1
region1[diet$region=='Europe'] = 0
region1[diet$region=='Other'] = 0
region2[diet$region=='Asia'] = 0
region2[diet$region=='Europe'] = 1
region2[diet$region=='Other'] = 0
region2
diet$region1 = region1
View(diet)
diet$region2 = region2
gen = replace(diet$geneder, diet$geneder == 'Male', 0)
diet$geneder = replace(diet$geneder, diet$geneder == 'Male', 0)
is.na(diet$geneder)
count(is.na(diet$geneder))
sum(is.na(diet$geneder))
diet$geneder = replace(diet$geneder, diet$geneder == 'Male', '0')
diet$geneder = replace(diet$geneder, diet$geneder == NA , '0')
View(diet)
diet$geneder = replace(diet$geneder, diet$geneder == 'NA' , '0')
diet$geneder = as.character(diet$geneder)
diet$geneder = replace(diet$geneder, diet$geneder == 'NA' , '0')
diet$geneder = replace(diet$geneder, diet$geneder == 'Female' , '1')
diet$geneder[is.na(diet$geneder)] = 0
setwd("~/")
setwd("D:/MS/SEM 3/MVDA/Exercises")
setwd("D:/MS/SEM 3/MVDA/Exercises/MVDA-Cluster-Analysis")
diet = read.csv("Cluster_Analysis_Survey.csv", header = TRUE, sep = ",")
names(diet)
# removed timestamp and empty column
diet = diet[, -1]
diet = diet[, -3]
# impute geneder 'prefer not to say' to 'female
diet[9,length(diet)] = 'Female'
diet$region = diet$Which.Region.do.you.belong.to.
diet$age = diet$How.old.are.you...years.completed.
diet$height = diet$What.is.your.height...in.cm.
diet$weight = diet$What.is.your.weight...in.Kg.
diet$meals_per_day = diet$How.many.times.do.you.eat.in.a.day..
diet$fruits = diet$How.many.days.in.a.week.do.you.eat.fruits.
diet$meat = diet$How.many.days.in.a.week.do.you.eat.meat.
diet$dairy = diet$How.many.days.in.a.week.do.you.eat.dairy.products.
diet$sweets = diet$How.many.days.in.a.week.do.you.eat.sweets.
diet$fast_food = diet$How.many.days.in.a.week.do.you.eat.fast.food.
diet$skip_breakfast = diet$How.many.days.in.a.week.do.you.skip.breakfast.
diet$alcohol = diet$How.many.days.in.a.week.do.you.consume.alcoholic.beverages.
diet$main_meal = diet$Most.frequent.source.of.your.main.meal..
diet$geneder = diet$What.is.your.gender..1
# delete old columns
diet = diet[, -c(1:14)]
nrow(diet)
region1 = seq(0, 0, length.out = nrow(diet))
region2 = seq(0, 0, length.out = nrow(diet))
region1[diet$region=='Asia'] = 1
region1[diet$region=='Europe'] = 0
region1[diet$region=='Other'] = 0
region2[diet$region=='Asia'] = 0
region2[diet$region=='Europe'] = 1
region2[diet$region=='Other'] = 0
diet$region1 = region1
diet$region2 = region2
diet$geneder = as.character(diet$geneder)
diet$geneder = replace(diet$geneder, diet$geneder == 'Male' , '0')
diet$geneder = replace(diet$geneder, diet$geneder == 'Female' , '1')
nrow(diet)
unique(diet$main_meal)
# impute 'most frequent meal' eggs => home cooked, canteen => restaurant
diet$main_meal = as.character(diet$main_meal)
diet$main_meal = replace(diet$main_meal, diet$main_meal == 'Eggs', 'Home cooked')
main_meal1 = seq(0, 0, length.out = nrow(diet))
main_meal2 = seq(0, 0, length.out = nrow(diet))
main_meal1[diet$main_meal == 'Home cooked'] = 1
main_meal1[diet$main_meal == 'Pre-cooked/microwave'] = 0
main_meal1[diet$main_meal == 'Canteen'] = 0
main_meal2[diet$main_meal == 'Home cooked'] = 0
main_meal2[diet$main_meal == 'Pre-cooked/microwave'] = 1
main_meal2[diet$main_meal == 'Canteen'] = 0
diet$main_meal1 = main_meal1
diet$main_meal2 = main_meal2
diet = diet[, -1]
diet = diet[, -13]
setwd("D:/MS/SEM 3/MVDA/Exercises/MVDA-Cluster-Analysis")
diet = read.csv("Cluster_Analysis_Survey.csv", header = TRUE, sep = ",")
names(diet)
# diet = cbind(diet[,2:3], diet[,5:length(diet)])
# removed timestamp and empty column
diet = diet[, -1]
diet = diet[, -3]
# impute geneder 'prefer not to say' to 'female
diet[9,length(diet)] = 'Female'
diet$region = diet$Which.Region.do.you.belong.to.
diet$age = diet$How.old.are.you...years.completed.
diet$height = diet$What.is.your.height...in.cm.
diet$weight = diet$What.is.your.weight...in.Kg.
diet$meals_per_day = diet$How.many.times.do.you.eat.in.a.day..
diet$fruits = diet$How.many.days.in.a.week.do.you.eat.fruits.
diet$meat = diet$How.many.days.in.a.week.do.you.eat.meat.
diet$dairy = diet$How.many.days.in.a.week.do.you.eat.dairy.products.
diet$sweets = diet$How.many.days.in.a.week.do.you.eat.sweets.
diet$fast_food = diet$How.many.days.in.a.week.do.you.eat.fast.food.
diet$skip_breakfast = diet$How.many.days.in.a.week.do.you.skip.breakfast.
diet$alcohol = diet$How.many.days.in.a.week.do.you.consume.alcoholic.beverages.
diet$main_meal = diet$Most.frequent.source.of.your.main.meal..
diet$geneder = diet$What.is.your.gender..1
# delete old columns
diet = diet[, -c(1:14)]
# impute 'most frequent meal' Eggs => Home Cooked
diet$main_meal = as.character(diet$main_meal)
diet$main_meal = replace(diet$main_meal, diet$main_meal == 'Eggs', 'Home cooked')
nrow(diet)
region1 = seq(0, 0, length.out = nrow(diet))
region2 = seq(0, 0, length.out = nrow(diet))
region1[diet$region=='Asia'] = 1
region1[diet$region=='Europe'] = 0
region1[diet$region=='Other'] = 0
region2[diet$region=='Asia'] = 0
region2[diet$region=='Europe'] = 1
region2[diet$region=='Other'] = 0
diet$region1 = region1
diet$region2 = region2
diet$geneder = as.character(diet$geneder)
diet$geneder = replace(diet$geneder, diet$geneder == 'Male', '0')
diet$geneder = replace(diet$geneder, diet$geneder == 'Female' , '1')
# diet$geneder[is.na(diet$geneder)] = 0
main_meal1 = seq(0, 0, length.out = nrow(diet))
main_meal2 = seq(0, 0, length.out = nrow(diet))
main_meal1[diet$main_meal == 'Home cooked'] = 1
main_meal1[diet$main_meal == 'Pre-cooked/microwave'] = 0
main_meal1[diet$main_meal == 'Canteen'] = 0
main_meal2[diet$main_meal == 'Home cooked'] = 0
main_meal2[diet$main_meal == 'Pre-cooked/microwave'] = 1
main_meal2[diet$main_meal == 'Canteen'] = 0
diet$main_meal1 = main_meal1
diet$main_meal2 = main_meal2
diet = diet[, -1]
diet = diet[, -12]
# convert meals_per_day '6 or more' to 6
diet$meals_per_day = as.character(diet$meals_per_day)
attach(diet)
diet$meals_per_day = replace(diet$meals_per_day, diet$meals_per_day == '6 or more', '6')
typeof(diet$meals_per_day)
diet$meals_per_day = as.numeric(diet$meals_per_day)
typeof(diet$meals_per_day)
typeof(diet$geneder)
diet$geneder = as.factor(diet$geneder)
typeof(diet$geneder)
diet$meals_per_day = as.factor(diet$meals_per_day)
d = dist(diet, method = "euclidean")
fit = hclust(d, method = "ward")
plot(fit)
groups = cutree(fit, k = 5)
rect.hclust(fit, k = 5, border = "red")
d1 = dist(diet, method = "euclidean")
fit1 = hclust(d, method = "average")
fit1 = hclust(d1, method = "average")
plot(fit1)
groups1 = cutree(fit1, k = 5)
rect.hclust(fit, k = 5, border = "red")
rect.hclust(fit1, k = 5, border = "red")
d = dist(diet, method = "euclidean")
fit = hclust(d, method = "ward")
plot(fit)
groups = cutree(fit, k = 5)
rect.hclust(fit, k = 5, border = "red")
d1 = dist(diet, method = "euclidean")
fit1 = hclust(d1, method = "average")
plot(fit1)
groups1 = cutree(fit1, k = 5)
rect.hclust(fit1, k = 5, border = "red")
d2 = dist(diet, method = "euclidean")
fit2 = hclust(d2, method = "complete")
plot(fit2)
groups2 = cutree(fit2, k = 5)
rect.hclust(fit2, k = 5, border = "red")
d3 = dist(diet, method = "euclidean")
fit3 = hclust(d3, method = "single")
plot(fit3)
groups3 = cutree(fit3, k = 5)
rect.hclust(fit3, k = 5, border = "red")
# K-means clustering with 3 clusters
fit4 = kmeans(diet, 3)
fit4
clusplot(diet, fit4$cluster, color = TRUE, shade = TRUE, labels = 2, lines = 0)
library(cluster)
clusplot(diet, fit4$cluster, color = TRUE, shade = TRUE, labels = 2, lines = 0)
color =  c("red", "blue", "green", "black")
clus4 = cutree(diet, 4)
color =  c("red", "blue", "green", "black")
clus4 = cutree(diet, 4)
plot(as.phylo(diet), type = "fan",  tip.color = colors[clus4], label.offset = 1, cex = 0.7)
plot(as.phylo(diet), type = "fan",  tip.color = colors[clus4], label.offset = 1, cex = 0.7)
library(ggplot2)
color =  c("red", "blue", "green", "black")
clus4 = cutree(diet, 4)
plot(as.phylo(diet), type = "fan",  tip.color = colors[clus4], label.offset = 1, cex = 0.7)
fit5 = kmeans(diet, 5)
fit5
clusplot(diet, fit5$cluster, color = TRUE, shade = TRUE, labels = 2, lines = 0)
clusplot(diet, fit4$cluster, color = TRUE, shade = TRUE, labels = 2, lines = 0)
fit5 = kmeans(diet, 10)
fit5
clusplot(diet, fit5$cluster, color = TRUE, shade = TRUE, labels = 2, lines = 0)
fit5 = kmeans(diet, 2)
fit5
clusplot(diet, fit5$cluster, color = TRUE, shade = TRUE, labels = 2, lines = 0)
USArrests
diet[,-15]
diet[,-15]
diet[,-15]
diet = diet[,-15]
diet = diet[,-15]
# K-means clustering with 3 clusters
fit4 = kmeans(diet, 3)
fit4
clusplot(diet, fit4$cluster, color = TRUE, shade = TRUE, labels = 2, lines = 0)
fit5 = kmeans(diet, 2)
fit5
clusplot(diet, fit5$cluster, color = TRUE, shade = TRUE, labels = 2, lines = 0)
